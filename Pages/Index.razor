@using System_ZiMZEwGD_Blazor.Data;
@using System.Timers;
@using System.Net.NetworkInformation
@using System.Text
@page "/"
@inject CustomHttpClient Http  
@inject AppSettingsService AppSettingsService 
<AuthorizeView>
<NotAuthorized>
<h2>Należy zalogować się</h2> 
</NotAuthorized>

<Authorized>
@if(Consumption == null)
{
    <img src="./css/basicloader.gif" />  
}
else
{

    <h2>Menu Główne</h2>  
    <div class="alert alert-primaty mb-4 border-dark">
        <div class="row">
            <h2 class="mb-0">Rok</h2>
            <button @onclick="checkYear">
            Zatwierdź
            </button>
            <select class ="from-control col-4 m1-3 border-dark" @bind="selectedYear" @bind:event="oninput">
                @for(int i=0;i<10000;i++)
                {
                    year[i] = false;  
                }
                @foreach (var item in Consumption.Reverse())
                {
                    for(int i=0;i<10000;i++)
                    {
                        if(item.date.Year==i)
                        {
                            if(year[i]==false)
                            {
                                <option>@item.date.Year</option>
                                year[i] = true;
                            }
                        }
                    }
                }          
            </select> 
        </div>
    </div>
    if(@showYearSummary)
    {
    <p>
    <a>Koszt z roku @yearlyCosts zł</a>
    </p>
    <p>
    <a>Miesięczne zużycie w KW/H</a> 
    </p>
    <Column Data="monthlyValue" Config="columnConfig"></Column>
    }
    <div class="alert alert-primaty mb-4 border-dark">
        <div class="row">
            <h2 class="mb-0">Miesiąc</h2>
            <button @onclick="checkMonth">
            Zatwierdź
            </button>
            <select class ="from-control col-4 m1-3 border-dark" @bind="selectedMonth" @bind:event="oninput">
                @for(int i=0;i<13;i++)
                {
                    month[i] = false;  
                }
                @foreach (var item in Consumption.Reverse())
                {
                    for(int i=0;i<13;i++)
                    {
                        if(item.date.Month==i)
                        {
                            if(month[i]==false)
                            {
                                <option>@item.date.Month</option>
                                month[i] = true;
                            }
                        }
                    }
                }          
            </select> 
        </div>
    </div>
    if(@showMonthSummary)
    {
    <p>
    <a>Koszt z miesiąca @monthlyCosts zł</a>
    </p>
    <p>
    <a>Dzienne zużycie w KW/H</a>
    </p>
    <Area Data="dailyValue" Config="areaConfig1"></Area>
    }
    <div class="alert alert-primaty mb-4 border-dark">
        <div class="row">
            <h2 class="mb-0">Dzień</h2>
            <button @onclick="checkDay">
            Zatwierdź
            </button>
            <select class ="from-control col-4 m1-3 border-dark" @bind="selectedDay" @bind:event="oninput">
                @for(int i=0;i<32;i++)
                {
                    day[i] = false;  
                }
                @foreach (var item in Consumption.Reverse())
                {
                    for(int i=0;i<32;i++)
                    {
                        if(item.date.Day==i)
                        {
                            if(day[i]==false)
                            {
                                <option>@item.date.Day</option>
                                day[i] = true;
                            }
                        }
                    }
                }          
            </select> 
        </div>
    </div>
    if(@showDaySummary)
    {
    <p>
    <a>Koszt z dnia @dailyCosts zł</a>
    </p>
    <p>
    <a>Godzinne zużycie w KW/H</a>  
    </p>
    <Area Data="hourlyValue" Config="areaConfig2"></Area>
    }
}
</Authorized>
</AuthorizeView>

@code{
    bool[] year = new bool[10000];
    bool[] month = new bool[13];
    bool[] day = new bool[32];
    private int _selectedYear;

    public ulong yearlyCosts = 0;
    public ulong monthlyCosts = 0;
    public ulong dailyCosts = 0;


    public int selectedYear
    {
        get
        {
            if (_selectedYear == 0)
                return Consumption.Last().date.Year;
            return _selectedYear;
        }
        set
        {
            _selectedYear = value;  
        }
    }
    private int _selectedMonth;
    public int selectedMonth
    {
        get
        {
            if (_selectedMonth == 0)
                return Consumption.Last().date.Month;
            return _selectedMonth;
        }
        set
        {
            _selectedMonth = value;  
        }
    }
    private int _selectedDay;
    public int selectedDay
    {
        get
        {
            if (_selectedDay == 0)
                return Consumption.Last().date.Day;
            return _selectedDay;
        }
        set
        {
            _selectedDay = value;  
        }
    }

    [Parameter]
    public bool showYearSummary{ get; set; }
    [Parameter]
    public bool showMonthSummary{ get; set; }
    [Parameter]
    public bool showDaySummary{ get; set; }
    class MinMax
    {
        public MinMax(string m)
        {
            minimum = ulong.MaxValue;
            maksimum = ulong.MinValue;
            month = m;

        }
        ulong minimum{ get; set; }
        ulong maksimum{ get; set; }
        [Parameter]
        public string month{ get; set; }
        [Parameter]
        public ulong value{ get; set; }
        public string type = "type-1";
        internal void checkminmax(ulong item)
        {
            if(item>maksimum)
            {
                maksimum = item;
                value = maksimum - minimum;
            }
            if(item<minimum)
            {
                minimum = item;
                value = maksimum - minimum;
            }

        }

    }
    Consumption[] Consumption;
    EventDeviceHandler[] eventDeviceHandler;
    Monitor[] monitor;
    string baseUrl;
    MinMax[] monthlyValue = { new MinMax("Styczeń"),
    new MinMax("Luty"),
    new MinMax("Marzec"),
    new MinMax("Kwiecień"),
    new MinMax("Maj"),
    new MinMax("Czerwiec"),
    new MinMax("Lipiec"),
    new MinMax("Sierpień"),
    new MinMax("Wrzesień"),
    new MinMax("Październik"),
    new MinMax("Listopad"),
    new MinMax("Grudzień"),
    };
    MinMax[] dailyValue = { new MinMax("1"),
    new MinMax("2"),
    new MinMax("3"),
    new MinMax("4"),
    new MinMax("5"),
    new MinMax("6"),
    new MinMax("7"),
    new MinMax("8"),
    new MinMax("9"),
    new MinMax("10"),
    new MinMax("11"),
    new MinMax("12"),
    new MinMax("13"),
    new MinMax("14"),
    new MinMax("15"),
    new MinMax("16"),
    new MinMax("17"),
    new MinMax("18"),
    new MinMax("19"),
    new MinMax("20"),
    new MinMax("21"),
    new MinMax("22"),
    new MinMax("23"),
    new MinMax("24"),
    new MinMax("25"),
    new MinMax("26"),
    new MinMax("27"),
    new MinMax("28"),
    new MinMax("29"),
    new MinMax("30"),
    new MinMax("31"),
    };
    MinMax[] hourlyValue = { new MinMax("1"),
    new MinMax("2"),
    new MinMax("3"),
    new MinMax("4"),
    new MinMax("5"),
    new MinMax("6"),
    new MinMax("7"),
    new MinMax("8"),
    new MinMax("9"),
    new MinMax("10"),
    new MinMax("11"),
    new MinMax("12"),
    new MinMax("13"),
    new MinMax("14"),
    new MinMax("15"),
    new MinMax("16"),
    new MinMax("17"),
    new MinMax("18"),
    new MinMax("19"),
    new MinMax("20"),
    new MinMax("21"),
    new MinMax("22"),
    new MinMax("23"),
    new MinMax("24"),
        };


    protected override async Task OnInitializedAsync()  
    {

        showYearSummary = false;
        monthlyValue[0] = new MinMax("Styczeń");
        monthlyValue[1] = new MinMax("Luty");
        monthlyValue[2] = new MinMax("Marzec");
        monthlyValue[3] = new MinMax("Kwiecień");
        monthlyValue[4] = new MinMax("Maj");
        monthlyValue[5] = new MinMax("Czerwiec");
        monthlyValue[6] = new MinMax("Lipiec");
        monthlyValue[7] = new MinMax("Sierpień");
        monthlyValue[8] = new MinMax("Wrzesień");
        monthlyValue[9] = new MinMax("Październik");
        monthlyValue[10] = new MinMax("Listopad");
        monthlyValue[11] = new MinMax("Grudzień");

        baseUrl = AppSettingsService.GetBaseUrl();  
        Consumption = await Http.GetJsonAsync<Consumption[]>(baseUrl + "/api/consumption/get");
        eventDeviceHandler = await Http.GetJsonAsync<EventDeviceHandler[]>(baseUrl + "/api/event/get");

        foreach (var item in eventDeviceHandler)
        {
            Timer timer = new Timer();
            timer.Interval = item.When.Hour *3600000 +item.When.Minute * 60000  + item.When.Second *1000 +item.When.Millisecond;
            timer.Elapsed += (sender, e) => MyElapsedMethod(sender, e, item);
            timer.Enabled = true;

        }

        foreach(var item in Consumption.Where(item => item.date.Year==selectedYear))
        {
            switch(item.date.Month)
            {
                case 1:
                    monthlyValue[0].checkminmax(item.value);
                    break;
                case 2:
                    monthlyValue[1].checkminmax(item.value);
                    break;
                case 3:
                    monthlyValue[2].checkminmax(item.value);
                    break;
                case 4:
                    monthlyValue[3].checkminmax(item.value);
                    break;
                case 5:
                    monthlyValue[4].checkminmax(item.value);
                    break;
                case 6:
                    monthlyValue[5].checkminmax(item.value);
                    break;
                case 7:
                    monthlyValue[6].checkminmax(item.value);
                    break;
                case 8:
                    monthlyValue[7].checkminmax(item.value);
                    break;
                case 9:
                    monthlyValue[8].checkminmax(item.value);
                    break;
                case 10:
                    monthlyValue[9].checkminmax(item.value);
                    break;
                case 11:
                    monthlyValue[10].checkminmax(item.value);
                    break;
                case 12:
                    monthlyValue[11].checkminmax(item.value);
                    break;

            }

        }
    }
    private async void MyElapsedMethod(object? sender, ElapsedEventArgs e, EventDeviceHandler deviceH) 
    {
        baseUrl = AppSettingsService.GetBaseUrl(); 
        monitor = await Http.GetJsonAsync<Monitor[]>(baseUrl + "/api/monitor/get");
        foreach(var item in monitor.Where(item => item.Name==deviceH.Name))
        {
            Ping pingSender = new Ping ();

            string data = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
            byte[] buffer = Encoding.ASCII.GetBytes (data);


            int timeout = 5000;

            PingOptions options = new PingOptions (64, true);
            PingReply reply = pingSender.Send (item.IP, timeout, buffer, options);
            if (reply.Status == IPStatus.Success)
            {
                Consumption c = await deviceH.sendCommand(item, deviceH.Command);
                await Http.PostJsonAsync(baseUrl + "/api/consumption/create", c);
            }
            else
            {
                Console.WriteLine($"Nie da się połączyć z {item.Name} ");
            }
        }
    }

    public async Task checkYear()  
    {
        yearlyCosts = 0;
        monthlyCosts = 0;
        dailyCosts = 0;

        showYearSummary = false;
        showMonthSummary = false;
        showDaySummary = false;

        monthlyValue[0] = new MinMax($"Styczeń {selectedYear}");
        monthlyValue[1] = new MinMax($"Luty {selectedYear}");
        monthlyValue[2] = new MinMax($"Marzec {selectedYear}");
        monthlyValue[3] = new MinMax($"Kwiecień {selectedYear}");
        monthlyValue[4] = new MinMax($"Maj {selectedYear}");
        monthlyValue[5] = new MinMax($"Czerwiec {selectedYear}");
        monthlyValue[6] = new MinMax($"Lipiec {selectedYear}");
        monthlyValue[7] = new MinMax($"Sierpień {selectedYear}");
        monthlyValue[8] = new MinMax($"Wrzesień {selectedYear}");
        monthlyValue[9] = new MinMax($"Październik {selectedYear}");
        monthlyValue[10] = new MinMax($"Listopad {selectedYear}");
        monthlyValue[11] = new MinMax($"Grudzień {selectedYear}");

        baseUrl = AppSettingsService.GetBaseUrl();  
        Consumption = await Http.GetJsonAsync<Consumption[]>(baseUrl + "/api/consumption/get"); 
        foreach(var item in Consumption.Where(item => item.date.Year==selectedYear))
        {
            switch(item.date.Month)
            {
                case 1:
                    monthlyValue[0].checkminmax(item.value);
                    break;
                case 2:
                    monthlyValue[1].checkminmax(item.value);
                    break;
                case 3:
                    monthlyValue[2].checkminmax(item.value);
                    break;
                case 4:
                    monthlyValue[3].checkminmax(item.value);
                    break;
                case 5:
                    monthlyValue[4].checkminmax(item.value);
                    break;
                case 6:
                    monthlyValue[5].checkminmax(item.value);
                    break;
                case 7:
                    monthlyValue[6].checkminmax(item.value);
                    break;
                case 8:
                    monthlyValue[7].checkminmax(item.value);
                    break;
                case 9:
                    monthlyValue[8].checkminmax(item.value);
                    break;
                case 10:
                    monthlyValue[9].checkminmax(item.value);
                    break;
                case 11:
                    monthlyValue[10].checkminmax(item.value);
                    break;
                case 12:
                    monthlyValue[11].checkminmax(item.value);
                    break;

            }

        }
        for(int i=0;i<12; i++)
        {
            yearlyCosts += monthlyValue[i].value;

        }
        yearlyCosts = yearlyCosts * 77 / 100;
        showYearSummary = true;

    }
    public async Task checkMonth()  
    {
        monthlyCosts = 0;
        dailyCosts = 0;

        showMonthSummary = false;
        showDaySummary = false;
        for(int i=0;i<DateTime.DaysInMonth(selectedYear,selectedMonth); i++)
        {
            dailyValue[i]=new MinMax($"{i+1} {selectedMonth}");

        }

        baseUrl = AppSettingsService.GetBaseUrl();  
        Consumption = await Http.GetJsonAsync<Consumption[]>(baseUrl + "/api/consumption/get"); 
        foreach(var item in Consumption.Where(item => item.date.Month==selectedMonth))
        {
            dailyValue[item.date.Day].checkminmax(item.value);

        }
        for(int i=0;i<DateTime.DaysInMonth(selectedYear,selectedMonth); i++)
        {
            monthlyCosts += dailyValue[i].value;

        }
        monthlyCosts = monthlyCosts * 77 / 100;
        showMonthSummary = true;


    }
    public async Task checkDay()  
    {
        dailyCosts = 0;

        showDaySummary = false;
        for(int i=0;i<24; i++)
        {
            hourlyValue[i]=new MinMax($"{i} {selectedDay}");

        }

        baseUrl = AppSettingsService.GetBaseUrl();  
        Consumption = await Http.GetJsonAsync<Consumption[]>(baseUrl + "/api/consumption/get"); 
        foreach(var item in Consumption.Where(item => item.date.Day==selectedDay))
        {
            hourlyValue[item.date.Hour].checkminmax(item.value);

        }
        for(int i=0;i<24; i++)
        {
            dailyCosts += hourlyValue[i].value;

        }
        dailyCosts = dailyCosts * 77 / 100;
        showDaySummary = true;

    }

    


    ColumnConfig columnConfig = new ColumnConfig()
    {
        Title = new Title()
        {
            Visible = true,
            Text = "Zuzycie energii"
        },
        Padding="Auto",
        ForceFit=true,
        XField="month",
        YField="value",



    };
    AreaConfig areaConfig1 = new AreaConfig()
    {
        Title = new Title()
        {
            Visible = true,
            Text = "Zuzycie energii"
        },
        Padding="Auto",
        ForceFit=true,
        XField="month",
        YField="value",
        
           

    };
    AreaConfig areaConfig2 = new AreaConfig()
    {
        Title = new Title()
        {
            Visible = true,
            Text = "Zuzycie energii"
        },
        Padding="Auto",
        ForceFit=true,
        XField="month",
        YField="value",
        
           

    };
}